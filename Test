#include <OneWire.h>
#include <DallasTemperature.h>
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
#ifdef ESP32
  #include <WiFi.h>
#else
  #include <ESP8266WiFi.h>
#endif
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>   
#include <ArduinoJson.h>

// constants won't change:
const long interval = 200;           // interval 

// Insert your network credentials
const char* ssid = "xxx";
const char* password = "xxx";

// Initialize Telegram BOT
#define BOTtoken "xxx"  // replace this with your bot token

#define CHAT_ID "xxx"  //replace with your telegram user ID

#ifdef ESP8266
  X509List cert(TELEGRAM_CERTIFICATE_ROOT);
#endif

WiFiClientSecure client;
UniversalTelegramBot bot(BOTtoken, client);

// Checks for new messages every 1 second.
int bot_delay = 500;

// Generally, you should use "unsigned long" for variables that hold time
// The value will quickly become too large for an int to store

unsigned long lastTimeBotRan;
unsigned long previousMillis_2 = 0;
unsigned long previousMillis_3 = 0;
  

// constants won't change:
          
const long get_sensor_data = 43200000; // 12hour period delay


extern volatile unsigned long timer0_millis;

#define DS18B20PIN 4

/* Create an instance of OneWire */
OneWire oneWire(DS18B20PIN);

DallasTemperature sensor(&oneWire);

LiquidCrystal_I2C lcd(0x27, 20, 4);

byte degree_symbol[8] = 
              {
                0b00111,
                0b00101,
                0b00111,
                0b00000,
                0b00000,
                0b00000,
                0b00000,
                0b00000
              };

  String getReadings(){
  sensor.requestTemperatures(); 
  float tempinC = sensor.getTempCByIndex(0);
  float tempinC_1 = sensor.getTempCByIndex(1);
  String message = "Fridge 1:  " + String(tempinC) + " ºC  \n";
  message += "Fridge 2:  " + String(tempinC_1) + " ºC \n";
  return message;
  
}

// Handle what happens when you receive new messages
void handleNewMessages(int numNewMessages) {
  Serial.println("Handling New Message");
  Serial.println(String(numNewMessages));

  for (int i=0; i<numNewMessages; i++) {
    // Chat id of the requester
    String chat_id = String(bot.messages[i].chat_id);
    if (chat_id != CHAT_ID){
      bot.sendMessage(chat_id, "Unauthorized user", "");
      continue;
    }
    
    // Print the received message
    String user_text = bot.messages[i].text;
    Serial.println(user_text);

    String your_name = bot.messages[i].from_name;

    if (user_text == "/start") {
      String welcome = "Welcome, " + your_name + ".\n";
      welcome += "Use the following command to view the state of your 2 x Fridges.\n\n";
      welcome += "Send /temp_readings to request Fridge 1 and 2 current temperature \n";
      
      bot.sendMessage(chat_id, welcome, "");
    }

    if (user_text == "/temp_readings") {
      String readings = getReadings();
      bot.sendMessage(chat_id, readings, "");
    } 
    
  }
}

void setup()
{
  /* Start the DS18B20 Sensor */
  Serial.begin(115200);
  sensor.begin();
  lcd.init();
  lcd.backlight();
  lcd.createChar(0, degree_symbol);
  lcd.setCursor(0,1);
  lcd.print(" Welcome ");
  lcd.setCursor(0,2);
  delay(2000);
  lcd.clear();

  // Connect to Wi-Fi
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  #ifdef ESP32
    client.setCACert(TELEGRAM_CERTIFICATE_ROOT); // Add root certificate for api.telegram.org
  #endif

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Welcome\xc2\xae");
    Serial.println("Connecting to WiFi..");
  }
  // Print ESP32 Local IP Address
  Serial.println("Connected to WiFi..");
  Serial.println(WiFi.localIP());

  lcd.setCursor(0,1);
  lcd.print("Connected to WiFi..");
  
  lcd.setCursor(0,2);
  lcd.print("SSID: ");
  lcd.println(ssid);

  
  lcd.setCursor(0,3);
  lcd.print(WiFi.localIP());
  delay(10000);
  lcd.clear(); 
}

void loop()
{
  sensor.requestTemperatures(); 
  float tempinC = sensor.getTempCByIndex(0);
  float tempinC_1 = sensor.getTempCByIndex(1);
  lcd.setCursor(1,0);
  lcd.print("Fridge 1 = ");
  lcd.print(tempinC);
  lcd.write(0);


  lcd.setCursor(1,2);
  lcd.print("Fridge 2 = ");
  lcd.print(tempinC_1);
  lcd.write(0);
 

  Serial.print("Fridge 1: ");
  Serial.print(tempinC);
  Serial.println("\xe2\x84\x83");
  Serial.print("Fridge 2: ");
  Serial.print(tempinC_1);
  Serial.println("\xe2\x84\x83");
  Serial.println();
  delay(100);
  
  unsigned long currentMillis = millis();
   if ((currentMillis - previousMillis_2 >= get_sensor_data) && (tempinC >= 25))
  {
    previousMillis_2 = currentMillis;
     bot.sendMessage(CHAT_ID, "Fridge 1 is out range @ > 0° -    " + String(tempinC) + "ºC", "");
     
     Serial.println("Fridge 1 out of range");

  }

 if ((currentMillis - previousMillis_3 >= get_sensor_data) && (tempinC_1 >= 25))
  {
    previousMillis_3 = currentMillis;
     bot.sendMessage(CHAT_ID, "Fridge 2 is out range @ > 0° -    " + String(tempinC_1) + "ºC", "");
     
     Serial.println("Fridge 2 out of range");

  }

  if (millis() > lastTimeBotRan + bot_delay)  {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

    while(numNewMessages) {
      Serial.println("Got Response!");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
    lastTimeBotRan = millis();
  }



  
}
              
